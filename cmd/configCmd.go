/*
   Pilot Host Controller
   Copyright (C) 2022-Present SouthWinds Tech Ltd - www.southwinds.io

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package cmd

import (
	"encoding/json"
	"fmt"
	"github.com/spf13/cobra"
	"southwinds.dev/artisan/core"
	ctl "southwinds.dev/pilotctl/types"
	core2 "southwinds.dev/piloth/core"
	"strings"
)

// ConfigCmd retrieves host/device configuration
type ConfigCmd struct {
	cmd *cobra.Command
}

func NewConfigCmd() *ConfigCmd {
	c := &ConfigCmd{
		cmd: &cobra.Command{
			Use:   "config [host-uuid|mac-addr|hw-id|machine-id|ALL]",
			Short: "retrieves host/device configuration",
			Long:  `retrieves host/device configuration`,
		},
	}
	c.cmd.Run = c.Run
	return c
}

func (c *ConfigCmd) Run(cmd *cobra.Command, args []string) {
	// collects device/host information
	hostInfo, err := ctl.NewHostInfo()
	if err != nil {
		core.RaiseErr("cannot collect host information")
	}
	// load host uuid from activation key if present
	hostInfo.HostUUID = hostUUID()
	switch len(args) {
	case 0:
		// prints the all host information
		i, _ := json.MarshalIndent(hostInfo, "", "  ")
		// prints the host information
		fmt.Printf("%s", i)
	case 1:
		if strings.ToUpper(args[0]) == "ALL" {
			i, _ := json.MarshalIndent(hostInfo, "", "  ")
			// prints the host information
			fmt.Printf("%s", i)
		} else if args[0] == "host-uuid" {
			fmt.Printf("%s\n", hostInfo.HostUUID)
		} else if args[0] == "mac-addr" {
			// prints the host UUID
			fmt.Printf("%s\n", hostInfo.PrimaryMAC)
		} else if args[0] == "hw-id" {
			// prints the host hardware system uuid
			fmt.Printf("%s\n", hostInfo.HardwareId)
		} else if args[0] == "machine-id" {
			// prints the host hardware system uuid
			fmt.Printf("%s\n", hostInfo.MachineId)
		} else {
			// shows usage message
			fmt.Printf(`unknown argument '%s', valid arguments are: 
- host-uuid:  the host unique identifier against a control plane; it is generated by the discovery process and is part of the activation key
- mac-addr:   MAC address of the host primary interface; the host unique identifier against the discovery service; can optionally be replaced with the device hardware id
- hw-id:      device hardware id; the alternative device unique identifier against the discovery service
- machine-id: operating system generated from a random source during system installation or first boot 
- ALL:        all host/device attributes
`, args[0])
		}
	default:
		// shows usage message
		fmt.Printf(`invalid arguments '%s'`, args[0])
	}
}

func hostUUID() string {
	core2.TRA, core2.CE = core2.NewTracer(false)
	var (
		ak  *core2.AKInfo
		err error
	)
	// prints the host UUID
	ak, err = core2.LoadActivationKey()
	if err != nil {
		core.InfoLogger.Printf("Host UUID is unknown: %s\n", err)
		return "unknown"
	}
	return ak.HostUUID
}
